name: Continuous Delivery

on:
  workflow_call:
    inputs:
      release_branches:
        required: false
        type: string
        default: 'main'
      skipTests:
        required: false
        type: boolean
        default: false
      mavenDeploy:
        required: false
        type: boolean
        default: false
      mattermostChannel:
        required: false
        type: string
        default: 'ci_js'
      notifyMattermost:
        required: false
        type: boolean
        default: true
      notifyTeams:
        required: false
        type: boolean
        default: false

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    env:
      # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
      # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
      MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
      # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
      # when running from the command line.
      # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
      MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

    steps:
      - uses: actions/checkout@v3

      - name: Bump version and create tag
        id: semanticversion
        uses: hennejg/github-tag-action@v4.2.4
        with:
          release_branches: Â¼{{ inputs.release_branches }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify and print new build number
        run: |
          if echo '${{ steps.semanticversion.outputs.new_tag }}' |grep -Eq '^v[0-9]+[.][0-9]+[.][0-9]+$'; then
            echo Tag '${{ steps.semanticversion.outputs.new_tag }}', New version '${{ steps.semanticversion.outputs.new_version }}', Changelog '${{ steps.semanticversion.outputs.changelog }}'
          else
            echo 'unexpected tag format - aborting'
            exit -1
          fi

      ## Configure JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'

      ## Configure maven settings
      - name: Prepare maven settings
        env:
          REGISTRY_URL: ${{ secrets.LEVIGO_NEXUS_REGISTRY_RELEASES }}
          REPOSITORY_URL: ${{ secrets.LEVIGO_NEXUS_REPO_ALL }}
          REPOSITORY_USERID: ${{ secrets.LEVIGO_NEXUS_USERNAME }}
          REPOSITORY_CREDENTIALS: ${{ secrets.LEVIGO_NEXUS_PASSWORD }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_LOGIN: ${{ secrets.SONAR_LOGIN }}
        run: |
          mkdir -p ~/.m2
          envsubst < ./.github/settings.xml > ~/.m2/settings.xml

      - name: Set version
        id: version
        run: |
          echo Releasing as ${{ steps.semanticversion.outputs.new_version }}
          mvn $MAVEN_CLI_OPTS versions:set -DnewVersion=${{ steps.semanticversion.outputs.new_version }}
          sed -i "s,\${application.formatted-version}, (${{ steps.semanticversion.outputs.new_version }})," src/main/resources/banner.txt || true

      ## Build and Test
      - name: Perform build
        if: ! ${{ inputs.skipTests }}
        run: mvn $MAVEN_CLI_OPTS package -Dmaven.test.failure.ignore=true -Djib.skip=true

      - name: Publish Test Report
        if: ! ${{ inputs.skipTests }}
        uses: scacap/action-surefire-report@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_test_failures: true
          fail_if_no_tests: true

      ## Build without running Tests
      - name: Perform build
        if: ${{ inputs.skipTests }}
        run: mvn $MAVEN_CLI_OPTS verify -DskipTests

      - name: Deploy images
        env:
          REGISTRY_URL: ${{ secrets.LEVIGO_NEXUS_REGISTRY_RELEASES }}
        run: >
          mvn $MAVEN_CLI_OPTS package
          -Dmaven.test.skip=true -Dmaven.install.skip=true
          -Dgit.commit.id=${{ github.sha }}
          -DenableDocker -Ddocker.registry.from=${REGISTRY_URL} -Ddocker.registry.to=${REGISTRY_URL}

      - name: Deploy packages
        if: inputs.mavenDeploy
        run: mvn $MAVEN_CLI_OPTS deploy -Dmaven.test.skip.exec=true -Dmaven.install.skip=true

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.semanticversion.outputs.new_tag }}
          name: ${{ steps.semanticversion.outputs.new_version }}

      - name: dispatch
        run: |
          curl \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type":"release_created","client_payload":{"version":"${{ steps.semanticversion.outputs.new_version }}"}}'

      - name: Notify Mattermost
        uses: hennejg/slack-build-notifier@v1.1
        if: inputs.notifyMattermost
        with:
          username: GitHub
          icon_emoji: octocat
          channel: ${{ inputs.mattermostChannel }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify teams
        uses: toko-bifrost/ms-teams-deploy-card@master
        if: inputs.notifyTeams
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          webhook-uri: ${{ secrets.JS_TEAMS_WEBHOOK_URL }}
          show-on-start: false
          show-on-exit: true
          show-on-failure: true
          card-layout-exit: complete
          timezone: "Europe/Berlin"
          include-files: false
