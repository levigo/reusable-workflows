name: Continuous Integration

on:
  workflow_call:
    inputs:
      # expected value is a JSON String. Example: '{"jdk": [11,17]}'
      matrix:
        required: false
        type: string
        default: '{"jdk": [17]}'
      javaDistribution:
        description: 'The Java distribution to use. (defaults to eclipse "temurin")'
        required: false
        type: string
        default: 'temurin'
      sonarAnalysisEnabled:
        required: false
        type: boolean
        default: true
      skipTests:
        required: false
        type: boolean
        default: false
      mattermostChannel:
        required: false
        type: string
        default: 'ci_js'
      notifyMattermost:
        required: false
        type: boolean
        default: true
      notifyTeams:
        required: false
        type: boolean
        default: false
      scanImage:
        required: false
        type: boolean
        default: true
      jibImageJson:
        required: false
        type: string
        default: 'target/jib-image.json'
      multiModule:
        description: Whether the project is a multi-module build. Determines whether the aggregate maven goal will be used.
        required: false
        type: boolean
        default: false

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    env:
      # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
      # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
      MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
      # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
      # when running from the command line.
      # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
      MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(inputs.matrix) }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: ${{ inputs.javaDistribution }}
          java-version: ${{ matrix.jdk }}
          cache: 'maven'

      - name: Prepare maven settings
        env:
          REGISTRY_URL: ${{ secrets.LEVIGO_NEXUS_REGISTRY_RELEASES }}
          REPOSITORY_URL: ${{ secrets.LEVIGO_NEXUS_REPO_ALL }}
          REPOSITORY_USERID: ${{ secrets.LEVIGO_NEXUS_USERNAME }}
          REPOSITORY_CREDENTIALS: ${{ secrets.LEVIGO_NEXUS_PASSWORD }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_LOGIN: ${{ secrets.SONAR_LOGIN }}
        run: |
          mkdir -p ~/.m2
          envsubst < ./.github/settings.xml > ~/.m2/settings.xml

      ##
      ## Starting here, there are 4 branches in the workflow
      ##

      ## 1. Maven Build without running Tests
      - name: Perform build
        if: ${{ inputs.skipTests == true && inputs.scanImage == false }}
        run: mvn $MAVEN_CLI_OPTS verify -DskipTests

      ## 2. Maven Build and run Tests
      - name: Perform build
        if: ${{ inputs.skipTests == false && inputs.scanImage == false }}
        run: mvn $MAVEN_CLI_OPTS verify -Dmaven.test.failure.ignore=true

      ## 3. Maven Build + Image Build and run Tests (default)
      - name: Perform build
        if: ${{ inputs.skipTests == false && inputs.scanImage == true }}
        env:
          REGISTRY_URL: ${{ secrets.LEVIGO_NEXUS_REGISTRY_RELEASES }}
        run: |
          mvn $MAVEN_CLI_OPTS verify \
            -Dmaven.test.failure.ignore=true \
            -DenableDocker \
            -Ddocker.registry.from=${REGISTRY_URL} \
            -Djib-maven-plugin.goal=dockerBuild
          echo "CONTAINER_IMAGE=$(jq -r .image ${{ inputs.jibImageJson }})" >> $GITHUB_ENV

      ## 4. Maven Build + Image Build without running Tests
      - name: Perform build
        if: ${{ inputs.skipTests == true && inputs.scanImage == true }}
        env:
          REGISTRY_URL: ${{ secrets.LEVIGO_NEXUS_REGISTRY_RELEASES }}
        run: |
          mvn $MAVEN_CLI_OPTS verify \
            -Dmaven.test.failure.ignore=true \
            -DenableDocker \
            -Ddocker.registry.from=${REGISTRY_URL} \
            -Djib-maven-plugin.goal=dockerBuild
          echo "CONTAINER_IMAGE=$(jq -r .image ${{ inputs.jibImageJson }})" >> $GITHUB_ENV


      ## run in case 2. and 3.
      - name: Publish Test Report
        if: inputs.skipTests == false
        uses: scacap/action-surefire-report@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_test_failures: true
          fail_if_no_tests: true

      ## run in case 3. and 4.
      - name: Scan container image
        if: inputs.scanImage == true
        uses: aquasecurity/trivy-action@0.17.0
        # workaround for timeout issue
        # - see https://github.com/aquasecurity/trivy-action/issues/190 and https://github.com/aquasecurity/trivy/issues/3421
        env:
          TRIVY_OFFLINE_SCAN: true
        with:
          image-ref: '${{ env.CONTAINER_IMAGE }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: false
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      ##
      ## End of branches
      ##

      - name: Perform sonar analysis
        if: inputs.sonarAnalysisEnabled
        continue-on-error: true
        run: |
          mvn $MAVEN_CLI_OPTS sonar:sonar -Dsonar.scm.disabled=true -Dsonar.qualitygate.wait=true -Dsonar.dependencyCheck.htmlReportPath=target/dependency-check-report.html

      - name: Notify Developers
        uses: 8398a7/action-slack@v3
        if: inputs.notifyMattermost && always()
        with:
          username: GitHub
          icon_emoji: octocat
          channel: ${{ inputs.mattermostChannel }}
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref
          text: ${{ github.workflow }} ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify teams
        uses: toko-bifrost/ms-teams-deploy-card@master
        if: inputs.notifyTeams && always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          webhook-uri: ${{ secrets.JS_TEAMS_WEBHOOK_URL }}
          show-on-start: false
          show-on-exit: true
          show-on-failure: true
          card-layout-exit: complete
          timezone: "Europe/Berlin"
          include-files: false

  call-license-check:
    uses: ./.github/workflows/license-check.yml
    secrets: inherit
    with:
      multiModule: ${{ inputs.multiModule }}
